python -m http.server

- всередині рядка таблиці - div-полоска з position:absolute; left: {k}px;
  k вираховується відповідно до довжини даблиці і тривалості дати
- при наведенні на рядок таблиці підсвічувати його
- підсвічувати стовпець із сьогоднішнім днем якщо він в діапазоні дат
- обмежити глибину дерева підзадач не більше 3
- обмежити довжину назви задачі(через css)
- написати генератор який циклічно видає кольори
- кольори назначаємо не рандомно, а циклічно пробігаючи по кожному елементу
- при наведенні на полоску задачі показувати title з інфою про задачу
- якщо є підзадачі, intervals не враховується, а рахується як проміжок між мінімальною і максимальною датою у підзадач
- при згортанні батьківської задачі, на ній позначаються підзадачі, 
  при розгортанні вона позначається порміжком між мінімальною і максимальною датою у підзадач

суми всіх підзадач(від min(startDate) до max(endDate))

- Процес роботи:
  1) отримуємо з сервера modelData, 
  2) validateModelData() - проводимо валідацію, 
  3) evaluateAppData(modelData) - розраховуємо дані про стан додатку
    app.scaleIndex, app.modelViewData та ін.
потім створюємо modelViewData - в якому вже прописані кольори, кількість предків, та ін
потім викликаємо renderTable 

- при валідації перевіряти чи всі id унікальні, 
  перевіряти чи всі дати коректні
  startDate < endDate 
  мінімальна тривалість задачі - 1 година
  перевіряти чи підзадачі не виходять за діапазон тривалості батьківської задачі

- робити неактивними опції масштабу які більші за fullLength/2 (весь діапазон задач)
- додати readme.md з описом особливостей


- відступи у полосок top: 30px*номер_рядка + 2px(щоб було по центру)


modelData = [
{
 id: 1
 taskName: "task1",
 startDate: "",
 endDate: "",
 subtasks: [
   {
    id: 2
    taskName: "task2",
    startDate: "",
    endDate: "",
    subtasks: [...]
   }, /...
 ]
},/...
]

app.modelViewData = {};

